<!DOCTYPE html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>War Vessels</title>
    <meta name='author' content="Manas Sarpatwar">
    <meta name="description" content="War vessels in browser">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" type="text/css" href="public/css/main.css" />
    <link rel="stylesheet" type="text/css" href="public/css/balloon.css" />
    <link rel="stylesheet" type="text/css" href="public/css/waves.css" />
    <script language="javascript" type="text/javascript" src="../public/js/helpers.js"></script>
    <script language="javascript" type="text/javascript" src="../public/js/Clipboard.js"></script>
</head>

<body>
    <main>
        <a href="https://github.com/manassarpatwar/WarVessels" aria-label="View source on GitHub">
            <svg width="80" height="80" viewBox="0 0 250 250" style="fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;"
                aria-hidden="true">
                <path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path>
                <path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2"
                    fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path>
                <path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z"
                    fill="currentColor" class="octo-body"></path>
            </svg>
        </a>
        <svg class="waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
        viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto">
        <defs>
        <path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z" />
        </defs>
        <g class="parallax">
        <use xlink:href="#gentle-wave" x="48" y="7"/>
        <use xlink:href="#gentle-wave" x="48" y="0"/>
        <use xlink:href="#gentle-wave" x="48" y="3"/>
        <use xlink:href="#gentle-wave" x="48" y="5"/>
        </g>
        </svg>
        <div id="center">
            <div id="splash">
                <div id ='title'>
                    <div class = 'title-word'>WAR</div>
                    <div class = 'title-word'>&nbsp;&nbsp;&nbsp;&nbsp;VESSELS</div>
                </div>
                <button onclick="switchState('mode')" style = "transform: translateY(-10%);" class="fill" id="multiplayer">
                    <p class='text'>Multiplayer</p>
                </button>
            </div>
            <div id="share" class="card noDisplay">
                <button onclick = "switchState('sessions')" class = "square-button triangle button-top-left point"></button>
                <p class='text'>Share
                    game
                    link:</p>
                <div id = "link-wrapper">
                    <label>
                        <button id="copy" class = "square-button point" onclick="copy()" aria-label="copied!" data-balloon-pos="up"><div class = "copy"></div></button>
                    </label>
                    <input contenteditable="true" readonly='true' id="link">
                </div>
                <button class="button fill" id="play">
                    <p class='text'>Play</p>
                </button>
            </div>
            <div id = "mode" class = "card noDisplay">
                <button onclick = "switchState('splash')" class = "square-button triangle point button-top-left"></button>
                <button id = "playWithFriend" class = "mode-button loader-right">
                    <p class='text'>Play with friend</p>
                </button>
                <button id = 'playRandom' onclick = "switchState('matchmaking')" class="mode-button  loader-right">
                    <p class='text'>Play random opponent</p>
                </button>
            </div>
            <div id = "matchmaking" class = "card noDisplay">
                <button onclick = "switchState('mode')" class = "square-button triangle point button-top-left"></button>
                <p>Coming soon!</p>
            </div>
            <div id="sessions" class="card noDisplay">
                <button onclick = "switchState('mode')" class = "square-button triangle point button-top-left"></button>
                <p class='text' id = "sessions-header">Resume or create game</p>
                <div id='sessions-buttons'>

                </div>
            </div>
        </div>
    </main>

</body>
<script>
    let sessionGamesID = <%- JSON.stringify(gamesID) %>;
    const maxSessions = <%- maxSessions %>;
    const splash = select('#splash');
    const share = select('#share');
    const sessions = select('#sessions');
    const sessionsButtons = select('#sessions-buttons');
    const link = select('#link');
    const playButton = select('#play');
    const mode = select('#mode')
    const copyButton = select('#copy');
    const matchmaking = select('#matchmaking');
    const playWithFriend = select('#playWithFriend');
    const playRandom = select('#playRandom');
    const states = [splash, share, sessions, mode, matchmaking];
    const loader = document.createElement('div');
    const sessionsHeader = document.getElementById('sessions-header');

    loader.classList.add('loader');
    for(let i = 0; i < 12; i++){
        const div = document.createElement('div');
        loader.appendChild(div);
    }

    function sessionGamesIDChanged(){
        playWithFriend.onclick = function(){
            if(sessionGamesID.length == 0){
                init(this);
            }else{
                switchState('sessions');
            }
        }

         if(sessionGamesID.length == 3){
            editText(sessionsHeader, "Resume game");
        }

    }



    function editText(el, text){
        const textNode = document.createTextNode(text);
        el.innerHTML = '';
        el.appendChild(textNode);
    }

    function switchState(state){
        switch(state){
            case 'splash':
                states.map(x => x.classList.add('noDisplay'));
                splash.classList.remove('noDisplay');
                break;
            case 'share':
                states.map(x => x.classList.add('noDisplay'));
                share.classList.remove('noDisplay');
                break;
            case 'sessions':
                states.map(x => x.classList.add('noDisplay'));
                sessionGamesIDChanged();
                appendSessionButtons(sessionGamesID);
                sessions.classList.remove('noDisplay');
                break;
            case 'mode':
                states.map(x => x.classList.add('noDisplay'));
                sessionGamesIDChanged();
                mode.classList.remove('noDisplay');
                break;
            case 'matchmaking':
                states.map(x => x.classList.add('noDisplay'));
                matchmaking.classList.remove('noDisplay');
                break;
            default:
                break;
        }
    }

    function copy() {
        Clipboard.copy(link.getAttribute('value'));
        copyButton.setAttribute('data-balloon-visible', '');
        setTimeout(() => { copyButton.removeAttribute('data-balloon-visible') }, 2000);
    };

    function shareGame(g) {
        switchState('share');
        link.setAttribute('value', 'https://war-vessels.herokuapp.com/play/' + g);
        playButton.onclick = function(){play(g)};
        if (!isOS())
            copy();

    }

    function appendSessionButtons(gamesID){
        sessionsButtons.innerHTML = '';
        const buttons = [];
        for(const g of gamesID) {
            const button = document.createElement('button');
            button.classList.add('square-button', 'sessions-button');
            button.onclick = function(){play(g)};
            const p = document.createElement('p');
            p.classList.add('text');
            const text = document.createTextNode(buttons.length+1);
            p.appendChild(text);
            button.appendChild(p);
            buttons.push(button);
        }
        for(let j = buttons.length; j < maxSessions; j++){
            const button = document.createElement('button');
            button.classList.add('square-button', 'sessions-button', 'create', 'plus', 'loader-center');
            button.onclick = function(){
                const requestingGame = buttons.some(b => b.classList.contains('flood'));
                if(!requestingGame){
                    button.classList.add('flood');
                    init(button);
                }
            };
            buttons.push(button);
        }
        
        for(const b of buttons){
            sessionsButtons.appendChild(b);
        }
    }


    function init(el){
        el.appendChild(loader);
        let duration = 750;
        const dt = 10;
        let callback = null;
        setTimeout(async function tock(){
            if(duration > 0){
                duration-=dt
                setTimeout(tock, dt);
            }else if(callback){
                callback();
            };
        }, 1);
        if(sessionGamesID.length < maxSessions+1){
            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/init', true);
            xhr.onreadystatechange = function () {
                if (xhr.readyState == XMLHttpRequest.DONE) {
                    const initDone = () => {
                        el.removeChild(loader);
                        const json = JSON.parse(xhr.responseText);
                        sessionGamesID = json.gamesID;
                        shareGame(sessionGamesID[sessionGamesID.length-1]);
                    }
                    if(duration > 0){
                        callback = initDone;
                    }else{
                        initDone();
                    }
                }
            }
            xhr.send();
        }
    }

    function play(g) {
        window.location.href = '../play/' + g;
    }
</script>

</html>